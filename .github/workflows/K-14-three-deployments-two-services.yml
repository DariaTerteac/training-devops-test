name: K-14 Three deployments expodes with two dervices

on:
  push:
    paths:
      - "kubernetes/14-three-deployments-two-services/**"
      - ".github/workflows/K-14-three-deployments-two-services.yml"
env:
  expected_size_of_arrays: "2"
  expected_matches: "1"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup k3d
        uses: nolar/setup-k3d-k3s@v1

      - name: Verify Docker installation
        run: docker version

      - name: Verify Kubernetes installation
        run: k3d --version

      - name: Create cluster with registry
        run: k3d cluster create demo-cluster --registry-create demo-registry:12345

      - name: Check cluster existence
        run: |
          CLUSTER_EXISTS=$(k3d cluster list | grep -c "demo-cluster")
          if [ "$CLUSTER_EXISTS" -eq 1 ]; then
             echo "Cluster exists"
          else
             echo "Cluster does not exist"
             exit 1
           fi
      - name: Apply all manifests at once 
        run: kubectl apply -f ./kubernetes/14-three-deployments-two-services/manifests
        
      - name: Add port to cluster
        run: |
          k3d cluster edit demo-cluster --port-add 8092:8092@loadbalancer
          k3d cluster edit demo-cluster --port-add 8093:8093@loadbalancer
          
      - name: Test load balancing
        run: |
          first_service_addresses=()
          for i in {1..10}; do
          first_service_address_value=$(curl -s http://localhost:8092 | grep -E -o "([0-9]{1,3}\.){1,3}[[:digit:]]{1,3}")
           if [[ -n "$first_service_address_value" ]] && ! [[ "${first_service_addresses[@]}" =~ "$first_service_address_value" ]]; then
          first_service_addresses+=("$first_service_address_value")
           fi
           sleep 1
          done
          
          echo "Unique first service address values: ${first_service_addresses[@]}"
          
          first_service_count=${#first_service_addresses[@]}
          echo "Number of unique first service address values: $first_service_count"
          echo "first_service_count=${first_service_count}" >> $GITHUB_ENV
          
          second_service_addresses=()
          matching_values=() 
          for i in {1..10}; do
          second_service_address_value=$(curl -s http://localhost:8093 | grep -E -o "([0-9]{1,3}\.){1,3}[[:digit:]]{1,3}")
          if [[ -n "$second_service_address_value" ]] && ! [[ "${second_service_addresses[@]}" =~ "$second_service_address_value" ]]; then
          second_service_addresses+=("$second_service_address_value")
          fi
          
          if [[ -n "$second_service_address_value" ]] && [[ "${first_service_addresses[@]}" =~ $second_service_address_value ]]; then
          if ! [[ "${matching_values[@]}" =~ "$second_service_address_value" ]]; then
          matching_values+=("$second_service_address_value")
          echo "Matching value for both services: $second_service_address_value"
          fi
          fi
          sleep 1
          done
          
          if [[ -z "${matching_values[@]}" ]]; then
          echo "No unique matching values found. Exiting..."
          exit 1
          fi
          
          echo "Unique second service address values: ${second_service_addresses[@]}"
          
          second_service_count=${#second_service_addresses[@]}
          echo "Number of unique second service address values: $second_service_count"
          echo "second_service_count=${second_service_count}" >> $GITHUB_ENV
          
          matching_values_count=${#matching_values[@]}
          echo "Number of matching service address values: $matching_values_count"
          echo "matching_values_count=${matching_values_count}" >> $GITHUB_ENV  
          
      - name: Check the counts for both services
        run: |
          if [[ "${{ env.first_service_count }}" != "${{ env.expected_size_of_arrays }}" ]] || [[ "${{ env.second_service_count }}" != "${{ env.expected_size_of_arrays }}" ]]; then
          echo "The loadbalancing is not shared between two services"
          exit 1
          fi
          
      - name: Check the number of matching values
        run: |
          if [[ "${{ env.matching_values_count }}" != "${{ env.expected_matches }}" ]]; then
          echo "The loadbalancing is not working properly"
          exit 1
          fi
