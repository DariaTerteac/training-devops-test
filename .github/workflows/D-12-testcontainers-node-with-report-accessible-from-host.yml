name: D-12 Node Testcontainers with Report Accessible in Docker

on:
  push:
    paths:
      - ".github/workflows/D-12-testcontainers-node-with-report-accessible-from-host.yml"
      - "docker/12-testcontainers-node-with-report-accessible-from-host/**"
env:
  TASK_PATH: "${{ github.workspace }}/docker/12-testcontainers-node-with-report-accessible-from-host"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Set environment variables
        run: |
          echo "USER_ID=$(id -u)" >> $GITHUB_ENV
          echo "GROUP_ID=$(id -g)" >> $GITHUB_ENV

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Initialize and update submodule
        run: |
          git submodule update --init --recursive
          cp -r ./submodules/testcontainers-node  ${{ env.TASK_PATH }}/src

      - name: Create report folder and check if it was successfully created
        run: |
          mkdir ${{ env.TASK_PATH }}/report
          if [ -d "${{ env.TASK_PATH }}/report" ]; then
            echo "Report folder was created"
            ls ${{ env.TASK_PATH }}
          else
            echo "Report folder wasn't created"
            exit 1
          fi

      - name: Create network
        run: docker network create demo-network

      - name: Run dind container
        run: docker run --privileged -d -p 12345:2375 --name dind-container -e DOCKER_TLS_CERTDIR="" --network demo-network docker:23.0.1-dind

      - name: Check Docker-in-Docker container
        # Checks the status of the Docker-in-Docker container and exits if not running
        run: |
          DIND_STATUS=$(docker inspect -f '{{.State.Status}}' dind-container)
          echo "Dind status: ${DIND_STATUS}"
          if [[ "${DIND_STATUS}" != "running" ]]; then
          echo "Dind container is not running"
          exit 1
          fi

      - name: Build Docker image
        run: |
          docker build -t 12-testcontainers-node:0.1 \
          --build-arg USER_ID=${{ env.USER_ID }} \
          --build-arg GROUP_ID=${{ env.GROUP_ID }} \
           ${{ env.TASK_PATH }}/src

      - name: Run tests in Docker container
        run: |
          BUILD_OUTPUT=$(docker run --name 12-task \
          --mount type=bind,source=${{ env.TASK_PATH }}/report,destination=/app/testcontainers-node/jest-test-report \
          --network demo-network 12-testcontainers-node:0.1)

      - name: Check if `report` folder has report after running tests
        run: |
          if [ -f "${{ env.TASK_PATH }}/report/index.html" ]; then
            cat  ${{ env.TASK_PATH }}/report/index.html 
          else 
            echo "Report folder is empty after running tests"
            exit 1
          fi

      - name: Search for a word in index.html
        run: |
           if grep -q "passed" ${{ env.TASK_PATH }}/report/index.html; then
            echo "The build passed"
           else
             echo "The build is failed"
             exit 1
           fi

      - name: Check report file `index.html` rights
        run: |
          folder_path="${{ env.TASK_PATH }}/report"
          user=$(stat -c '%U' $folder_path)
          group=$(stat -c '%G' $folder_path)
          if [[ "$user" == "$(id -un)" && "$group" == "$(id -gn)" ]]; then
          echo "User=$user, $(id -un)"
          echo "Group=$group, $(id -gn)"
          else
          echo "Error: user and group owners are incorrect"
          exit 1
          fi
          
