name: K-16 Helm Chart using springboot application, postgresql and pgadmin

on:
 push:
  paths:
   - '.github/workflows/K-16-parametrized-helm-chart.yml'
   - './kubernetes/16-parametrized-helm-chart/**'

jobs:
 build:
  runs-on: ubuntu-latest
  
  env: 
    SRC_FOLDER: "${{ github.workspace }}/kubernetes/16-parametrized-helm-chart/springboot-api/api"
    PGADMIN_PORT: "18081"
    SPRINGBOOT_API_PORT: "18080"
    PSQL_PORT: "6432"
      
  steps:
   - name: Checkout repository
     uses: actions/checkout@v3

   - name: Setup k3d
     uses: nolar/setup-k3d-k3s@v1

   - name: Verify Docker installation
     run: docker version
     
   - name: Verify Kubernetes installation
     run: k3d --version
     
   - name: Install PSQL
     run: |
      sudo apt-get update
      sudo apt-get install -y postgresql-client
      psql --version

   - name: Initialize and update submodule
     run: |
      git submodule update --init --recursive submodules/springboot-api
      cp -r ./submodules/springboot-api ./kubernetes/16-parametrized-helm-chart
      if [ -d './kubernetes/16-parametrized-helm-chart/springboot-api' ]; then
      echo "Submodule directory was copied successfully"
      else
      echo "Submodule directory wasn't copied"
      exit 1
      fi

   - name: Create cluster with registry
     run: |
        k3d cluster create demo-cluster \
        --registry-create demo-registry:12345 \
        -p ${{ env.PGADMIN_PORT }}:8081@loadbalancer \
        -p ${{ env.SPRINGBOOT_API_PORT }}:8080@loadbalancer \
        -p ${{ env.PSQL_PORT }}:6432@loadbalancer

   - name: Build, tag and push the image
     uses: docker/build-push-action@v4
     with:
         context: ${{ env.SRC_FOLDER }}
         file: ${{ env.SRC_FOLDER }}/docker/Dockerfile.prod
         push: true
         tags: localhost:12345/16-springboot-api:0.1
         build-args: |
           USER_ID=$(id -u)
           GROUP_ID=$(id -g)

   - name: Install helm chart
     run: |
       # Prod version without PGAdmin
       helm upgrade --install --cleanup-on-fail demo-chart \
        ./kubernetes/16-parametrized-helm-chart/demo-chart --namespace demo-chart --create-namespace \
        --set service.type=LoadBalancer --wait \
        --set pgadmin.enabled=false
        
   - name: Check if deployments are available
     run: |
       ./check_exit_code_and_logs.sh 'kubectl wait deployment/api -n demo-chart --for=condition=available'
       ./check_exit_code_and_logs.sh 'kubectl wait deployment/server-postgres -n demo-chart --for=condition=available'
      
#    - name: Check if PGAdmin is abcent in the list of deployments
#      run: |
#       available_deployments=$(kubectl get deployments -n demo-chart -o jsonpath='{.items[*].metadata.name}')
#       if [[ ! $available_deployments =~ (^|[[:space:]])"pgadmin"($|[[:space:]]) ]]; then
#        echo "Deployment `pgadmin` is not present in the `demo-chart`  namespace."
#       else
#        echo "Deployment `pgadmin' is present in the `demo-chart` namespace."
#       fi
      
      
   - name: Check if springboot api web page is available
     uses: jtalk/url-health-check-action@v3
     with:
      url: http://localhost:18080/app
      max-attempts: 3 
      retry-delay: 5s
      
   - name: Check PSQL connection
     run: |
       ./check_exit_code_and_logs.sh  'psql postgresql://md_dterteac:123@localhost:${{ env.PSQL_PORT }}/demodb'
   
   - name: Setup tmate session
     if: ${{ failure() }}
     uses: mxschmitt/action-tmate@v3.11

