name: K-12 Three tests in Argo Workflows

on:
  push:
    paths:
      - ".github/workflows/K-12-three-tests-in-argo-workflows.yml"
      - "kubernetes/12-three-tests-in-argo-workflows/**"

env:
  TASK_PATH: "${{ github.workspace }}/kubernetes/12-three-tests-in-argo-workflows"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Set environment variables
        run: |
          echo "USER_ID=$(id -u)" >> $GITHUB_ENV
          echo "GROUP_ID=$(id -g)" >> $GITHUB_ENV

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup k3d
        uses: nolar/setup-k3d-k3s@v1

      - name: Install w3m on Ubuntu
        run: sudo apt-get update && sudo apt-get install -y w3m

      - name: Verify Docker installation
        run: docker version

      - name: Verify Kubernetes installation
        run: k3d --version

      - name: Initialize and update submodule
        run: |
          git submodule update --init --recursive
          cp -r ./submodules/testcontainers-java ${{ env.TASK_PATH }}/src
          cp -r ./submodules/testcontainers-python ${{ env.TASK_PATH }}/src
          cp -r ./submodules/testcontainers-node ${{ env.TASK_PATH }}/src

      - name: Create report folder and check if it was successfully created
        run: |
          mkdir ${{ env.TASK_PATH }}/report
          if [ -d "${{ env.TASK_PATH }}/report" ]; then
            echo "Report folder was created"
            ls ${{ env.TASK_PATH }}/report
          else
            echo "Report folder wasn't created"
            exit 1
          fi

      - name: Create cluster with registry
        run: |
          k3d cluster create demo-cluster \
          --registry-create demo-registry:12345 \
          --volume ${{ env.TASK_PATH }}/report:/report

      - name: Create namespace and install argo
        run: |
          kubectl create namespace argo
          kubectl config set-context --current --namespace 'argo'
          kubectl apply -n argo -f https://github.com/argoproj/argo-workflows/releases/download/v3.4.6/install.yaml

      - name: Check cluster existence
        run: |
          CLUSTER_EXISTS=$(k3d cluster list | grep -c "demo-cluster")
          if [ "$CLUSTER_EXISTS" -eq 1 ]; then
             echo "Cluster exists"
          else
             echo "Cluster does not exist"
             exit 1
          fi 

      - name: Build, tag and push `12-testcontainers-java-argo:0.1` image
        uses: docker/build-push-action@v4
        with:
          context: ${{ env.TASK_PATH }}/src
          file: ${{ env.TASK_PATH }}/src/Dockerfile-java
          push: true
          tags: localhost:12345/12-testcontainers-java-argo:0.1
          build-args: |
            USER_ID=$(id -u)
            GROUP_ID=$(id -g)

      - name: Build, tag and push `12-testcontainers-python-argo:0.1` image
        uses: docker/build-push-action@v4
        with:
          context: ${{ env.TASK_PATH }}/src
          file: ${{ env.TASK_PATH }}/src/Dockerfile-python
          push: true
          tags: localhost:12345/12-testcontainers-python-argo:0.1
          build-args: |
            USER_ID=$(id -u)
            GROUP_ID=$(id -g)

      - name: Build, tag and push `12-testcontainers-node-argo:0.1` image
        uses: docker/build-push-action@v4
        with:
          context: ${{ env.TASK_PATH }}/src
          file: ${{ env.TASK_PATH }}/src/Dockerfile-node
          push: true
          tags: localhost:12345/12-testcontainers-node-argo:0.1
          build-args: |
            USER_ID=$(id -u)
            GROUP_ID=$(id -g)

      - name: Apply manifest
        run: |
          kubectl apply -f ${{ env.TASK_PATH }}/manifests
          sleep 20

      - name: Wait for python report to appear
        run: |
          ./check_exit_code_and_logs.sh '-d ${{ env.TASK_PATH }}/report/python'

      - name: Wait for node report to appear
        run: |
          ./check_exit_code_and_logs.sh '-d ${{ env.TASK_PATH }}/report/node'

      - name: Wait for java report to appear
        run: |
          ./check_exit_code_and_logs.sh '-d ${{ env.TASK_PATH }}/report/gradle'


      - name: Check if testcontainers-node build was successful
        run: |
           if grep -q "4 passed" ${{ env.TASK_PATH }}/report/node/index.html; then
           w3m "${{ env.TASK_PATH }}/report/node/index.html"
            echo "The testcontainers-node build was successful"
           else
             echo "The testcontainers-node build was failed"
             exit 1
           fi

      - name: Check if testcontainers-python build was successful
        run: |
           if grep -q "2 passed" ${{ env.TASK_PATH }}/report/python/report.html; then
            w3m "${{ env.TASK_PATH }}/report/python/report.html"
            echo "The testcontainers-python build was successful"
           else
             echo "The testcontainers-python build was failed"
             exit 1
           fi

      - name: Check if testcontainers-java build was successful
        run: |
             if grep -o "Success" ${{ env.TASK_PATH }}/report/gradle/index.html; then
             w3m "${{ env.TASK_PATH }}/report/gradle/index.html"
             echo "The testcontainers-java build was successful"
             else
             echo "The testcontainers-java build was failed"
             exit 1
             fi

      - name: Check report folder rights
        run: |
           folder_path="${{ env.TASK_PATH }}/report"
           user=$(stat -c '%U' $folder_path)
           group=$(stat -c '%G' $folder_path)
           if [[ "$user" == "$(id -un)" && "$group" == "$(id -gn)" ]]; then
           echo "User=$user, $(id -un)"
           echo "Group=$group, $(id -gn)"
           else
           echo "Error: user and group are incorrect"
           exit 1
           fi
