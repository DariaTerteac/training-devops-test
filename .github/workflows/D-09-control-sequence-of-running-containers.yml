name: D-09 Control Sequence of Running Containers

on:
  push:
    paths:
      - "docker/09-control-sequence-of-running-containers/**"
      - ".github/workflows/D-09-control-sequence-of-running-containers.yml"

env:
  TASK_PATH: "./docker/09-control-sequence-of-running-containers"

jobs:
  testcontainers-java:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Verify Docker installation
        run: docker version

      - name: Copy submodule
        run: |
          git submodule update --init --recursive 
          cp -r ./submodules/testcontainers-java ${{ env.TASK_PATH }}/src

      - name: Create network
        run: docker network create demo-network

      - name: Start Docker-in-Docker container
        run: docker run --privileged -dti --name dind-container -e DOCKER_TLS_CERTDIR="" --network demo-network docker:23.0.1-dind

      - name: Check Docker-in-Docker container
        # Checks the status of the Docker-in-Docker container and exits if not running
        run: |
          DIND_STATUS=$(docker inspect -f '{{.State.Status}}' dind-container)
          echo "Dind status: ${DIND_STATUS}"
          if [[ "${DIND_STATUS}" != "running" ]]; then
          echo "Dind container is not running"
          exit 1
          fi

      - name: Build and run testcontainers-java example
        # Builds and runs the testcontainers-java example, redirecting the output to a log file
        run: |
          docker build -t 09-testcontainers-java:0.1 -f \
          ${{ env.TASK_PATH }}/src/Dockerfile \
          ${{ env.TASK_PATH }}/src

          docker run --name 09-task --network demo-network 09-testcontainers-java:0.1 > 09-task-logs.txt
          TASK_OUTPUT=$(grep "BUILD SUCCESSFUL" 09-task-logs.txt)
          echo "TASK_OUTPUT=${TASK_OUTPUT}" >> $GITHUB_ENV

      - name: Check exit status
        run: |
          CONTAINER_STATUS=$(docker inspect 09-task --format='{{.State.ExitCode}}')
          if [ "$CONTAINER_STATUS" -eq 0 ]; then
            echo "Container exited successfully"
          else
            echo "Container failed with exit status $CONTAINER_STATUS"
            exit 1
          fi

      - name: Extract build status from `09-task` and compare
        # Extracts the build status from the `09-task` container logs and compares it to the expected
        run: |
          if [[ "${{ env.TASK_OUTPUT }}" == *"BUILD SUCCESSFUL"* ]]; then
            echo "The build is successful"
          else
           echo "The build is failed"
           exit 1
          fi

      - name: Build and run testcontainers-java with sleep example
        # Builds and runs the testcontainers-java with sleep example, redirecting the output to a log file
        run: |
          docker build -t 09-testcontainers-java-sleep:0.1 -f \
          ${{ env.TASK_PATH }}/src/Dockerfile-sleep \
          ${{ env.TASK_PATH }}/src

          docker run --name 09-task-sleep --network demo-network 09-testcontainers-java-sleep:0.1  > 09-task-sleep-logs.txt
          TASK_SLEEP_OUTPUT=$(grep "BUILD SUCCESSFUL" 09-task-sleep-logs.txt)
          echo "TASK_SLEEP_OUTPUT=${TASK_SLEEP_OUTPUT}" >> $GITHUB_ENV

      - name: Check exit status
        run: |
          CONTAINER_STATUS=$(docker inspect 09-task-sleep --format='{{.State.ExitCode}}')
          if [ "$CONTAINER_STATUS" -eq 0 ]; then
            echo "Container exited successfully"
          else
            echo "Container failed with exit status $CONTAINER_STATUS"
            exit 1
          fi

      - name: Extract build status from `09-task-sleep` and compare
        # Extracts the build status from the `09-task-sleep` container logs and compares it to the expected
        run: |
          if [[ "${{ env.TASK_SLEEP_OUTPUT }}" == *"BUILD SUCCESSFUL"* ]]; then
            echo "The build is successful"
          else
           echo "The build is failed"
           exit 1
          fi

      - name: Build and run testcontainers-java with dockerize example
        # Builds and runs the testcontainers-java with dockerize example, redirecting the output to a log file
        run: |
          docker build -t 09-testcontainers-java-dockerize:0.1 \
          -f ${{ env.TASK_PATH }}/src/Dockerfile-dockerize \
          ${{ env.TASK_PATH }}/src

          docker run --name 09-task-dockerize --network demo-network 09-testcontainers-java-dockerize:0.1  > 09-task-dockerize-logs.txt
          TASK_DOCKERIZE_OUTPUT=$(grep "BUILD SUCCESSFUL" 09-task-dockerize-logs.txt)
          echo "TASK_DOCKERIZE_OUTPUT=${TASK_DOCKERIZE_OUTPUT}" >> $GITHUB_ENV

      - name: Check exit status
        run: |
          CONTAINER_STATUS=$(docker inspect 09-task-dockerize --format='{{.State.ExitCode}}')
          if [ "$CONTAINER_STATUS" -eq 0 ]; then
            echo "Container exited successfully"
          else
            echo "Container failed with exit status $CONTAINER_STATUS"
            exit 1
          fi

      - name: Extract build status from `09-task-dockerize` and compare
        # Extracts the build status from the `09-task-dockerize` container logs and compares it to the expected
        run: |
          if [[ "${{ env.TASK_DOCKERIZE_OUTPUT }}" == *"BUILD SUCCESSFUL"* ]]; then
            echo "The build is successful"
          else
           echo "The build is failed"
           exit 1
          fi
