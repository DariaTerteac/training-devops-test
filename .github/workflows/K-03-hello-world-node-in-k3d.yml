name: K-03 HelloWorld JavaScript in k3d
on:
  push:
    paths:
      - "kubernetes/03-hello-world-node-in-k3d/**"
      - ".github/workflows/K-03-hello-world-node-in-k3d.yml"

env:
  EXPECTED: "Hello, World!"
  IMAGE_NAME: "localhost:12345/03-hello-world-node-in-k3d:0.1"
  TASK_PATH: "${{ github.workspace }}/kubernetes/03-hello-world-node-in-k3d"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup k3d
        uses: nolar/setup-k3d-k3s@v1

      - name: Verify Docker installation
        run: docker version

      - name: Verify Kubernetes installation
        run: k3d --version

      - name: Create cluster
        run: |
          k3d cluster create demo-cluster --registry-create demo-registry:12345

      - name: Check cluster existence
        run: |
          CLUSTER_EXISTS=$(k3d cluster list | grep -c "demo-cluster")
          if [ "$CLUSTER_EXISTS" -eq 1 ]; then
           echo "Cluster exists"
          else
           echo "Cluster does not exist"
           exit 1
          fi

      - name: Build, tag and push the image
        uses: docker/build-push-action@v4
        with:
           context: ${{ env.TASK_PATH }}/src
           file: ${{ env.TASK_PATH }}/src/Dockerfile
           push: true
           tags: ${{ env.IMAGE_NAME }}

      - name: Check image existence
        run: |
          TAGGED_IMAGE_EXISTS=$(docker images -q ${{ env.IMAGE_NAME }})
          if [ -n "$TAGGED_IMAGE_EXISTS" ]; then
           echo "Image ${{ env.IMAGE_NAME }} exists"
          else
           echo "Image ${{ env.IMAGE_NAME }} does not exist"
           exit 1
          fi

      - name: Apply manifest
        run: kubectl apply -f ./kubernetes/03-hello-world-node-in-k3d/manifests

      - name: Watch container logs
        run: |
          kubectl wait deployment -n default hello-world-node --for=condition=Available --timeout=1m
          OUTPUT=$(kubectl logs -l app=hello-world-node --follow)
          echo "OUTPUT=${OUTPUT}" >> $GITHUB_ENV

      - name: Compare output with expected one
        run: |
          if [[ "${{ env.OUTPUT }}" == "${{ env.EXPECTED }}" ]]; then
            echo "The outputs match"
          else
           echo "The outputs don't match"
           exit 1
          fi
